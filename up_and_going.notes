-----------------------------------------------------------
    Up and Going
-----------------------------------------------------------
=> a variable can get undefined in many ways including function that returns no value or void operator.
=> Array is also object and it gets linked to Array.prototype at time of creation
	- Also array's properties are numerical and can't be accessed by . notation
	- Object's keys are always string and can be accessed both by . and ![]! notation.
[js]
//==== 1 ====//
var a = [1,2,3];
var b = [1,2,3];
var c = "1,2,3";
a == c; // true
b == c; // true
a == b; // false - matches the underlying value of a and b which is reference and both reference differs hence a!=b.
//==== 2 ====//
var a = 41;
var b = "42";
var c = "43";
a < b; // true
b < c; //true
//==== 3 ====//
var a = 42;
var b = "foo";
a < b; // false
a > b; // false
a == b; // false
[js]
=>!2! It says that if both values in the < comparison are strings, as it is with b < c, the comparison is made lexicographically (aka alphabetically like a dictionary). 
   But if one or both is not a string, as it is with a < b,then both values are coerced to be numbers, and a typical numeric comparison occurs.
=>!1! If you’re comparing two non-primitive values, like objects (including function and array). Because those values are actually held by reference,
   both == and === comparisons will simply check whether the references match, not anything about the underlying values.
=>!3! Because the b value is being coerced to the “invalid number value” NaN in the < and > comparisons
	-	The == comparison fails for a different reason. a == b could fail if it’s interpreted either as 42 == NaN or "42" == "foo".
--- Function as a value ---
[js]
function foo(){

}
[js]

=> foo is basically just a variable in the outer enclosing scope that’s given a reference to the function being declared. 
	- #That is, the function itself is a value#
=> Objects, Arrays, Functions, and RegExps (regular expressions) are all objects regardless of whether the literal or constructed form is used.
   The constructed form does offer, in some cases, more options in creation than the literal form counterpart.
=> null and undefined have no object wrapper form, only their primitive values.