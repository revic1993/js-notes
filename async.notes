-----------------------------------------------------------
    Async & Performance
-----------------------------------------------------------
=> 	It's important to note that #setTimeout(..)# doesn't put your callback on the event loop queue. What it does is set up a timer;
	when the timer expires, the environment places your callback into the event loop, such that some future tick will pick it up
	and execute it.
=>	What if there are already 20 items in the event loop at that moment? Your callback waits. It gets in line behind the others --
	there's not normally a path for preempting the queue and skipping ahead in line. This explains why setTimeout(..) timers
	may not fire with perfect temporal accuracy. You're guaranteed (roughly speaking) that your callback won't fire before the
	time interval you specify, but it can happen at or after that time, depending on the state of the event queue

#Run to Completion#
=>	Because of JavaScript's single-threading, the code inside of foo() (and bar() ) is atomic, which means that once foo()
	starts running, the entirety of its code will finish before any of the code in bar() can run, or vice versa. This is called "runto-
	completion" behavior.

#Jobs#
[js]
console.log( "A" );
setTimeout( function(){
	console.log( "B" );
}, 0 );
// theoretical "Job API"
schedule( function(){
	console.log( "C" );
	schedule( function(){
		console.log( "D" );
	} );
} );
[js]
=>	It would print out "A C D B" , because the Jobs happen at the end of
	the current event loop tick, and the timer fires to schedule for the next event loop tick (if available).

--= Promises =--
=> Indicates future value that could be in either of the state : pending,success,failure.
=> #Promise# is externally immutable once resolved.
[js]
function add(getX,getY,cb) {
	var x, y;
	getX( function(xVal){
		x = xVal;
		// both are ready?
		if (y != undefined) {
		cb( x + y ); // send along sum
		}
	} );
	getY( function(yVal){
		y = yVal;
		// both are ready?
		if (x != undefined) {
		cb( x + y ); // send along sum
		}
	} );
}
// `fetchX()` and `fetchY()` are sync or async
// functions
add( fetchX, fetchY, function(sum){
	console.log( sum ); // that was easy, huh?
} );
[js]
--= Immutability of Promise =--
[js]
function bar() {
	// `foo(..)` has definitely finished, so
	// do `bar(..)`'s task
}
function oopsBar() {
	// oops, something went wrong in `foo(..)`,
	// so `bar(..)` didn't run
}
// ditto for `baz()` and `oopsBaz()`
var p = foo( 42 );
p.then( bar, oopsBar );
p.then( baz, oopsBaz );
[js]
=> 	snippets end up calling then(..) twice against the same promise p illustrates the point made
	earlier, which is that Promises (once resolved) retain their same resolution (fulfillment or rejection) forever, 
	and can subsequently be observed as many times as necessary.

#Reveling Constructor# -> https://blog.domenic.me/the-revealing-constructor-pattern/

--- Promise Trust ---
#Refer callback_trust_issue.png#

=>Callback too early 
	->	Zalgo-like effects where sometimes a taskfinishes synchronously and sometimes asynchronously, which can lead to race conditions.

=> Callback too late 
	->	It's not possible for synchronous observation, so it's not possible for a synchronous chain of tasks to run in such a way to in
		effect "delay" another callback from happening as expected. That is, when a Promise is resolved, all then(..) registered
		callbacks on it will be called, in order, immediately at the next asynchronous opportunity (#Jobs#),
		and nothing that happens inside of one of those callbacks can affect/delay the calling of the other callbacks.

=> 	Nothing (not even a JS error) can prevent a Promise from notifying you of its resolution (if it's resolved). If you register
	both fulfillment and rejection callbacks for a Promise, and the Promise gets resolved, one of the two callbacks will always
	be called.
=> 	Promises are defined so that they can only be resolved once. If for some reason
	the Promise creation code tries to call resolve(..) or reject(..) multiple times, or tries to call both, 
	the Promise will accept only the first resolution, and will silently ignore any subsequent attempts.
=> Promises can have, at most, one resolution value (#fulfillment or rejection#).
!Refer promise_error.png!