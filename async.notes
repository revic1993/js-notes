-----------------------------------------------------------
    Async & Performance
-----------------------------------------------------------
=> 	It's important to note that #setTimeout(..)# doesn't put your callback on the event loop queue. What it does is set up a timer;
	when the timer expires, the environment places your callback into the event loop, such that some future tick will pick it up
	and execute it.
=>	What if there are already 20 items in the event loop at that moment? Your callback waits. It gets in line behind the others --
	there's not normally a path for preempting the queue and skipping ahead in line. This explains why setTimeout(..) timers
	may not fire with perfect temporal accuracy. You're guaranteed (roughly speaking) that your callback won't fire before the
	time interval you specify, but it can happen at or after that time, depending on the state of the event queue

#Run to Completion#
=>	Because of JavaScript's single-threading, the code inside of foo() (and bar() ) is atomic, which means that once foo()
	starts running, the entirety of its code will finish before any of the code in bar() can run, or vice versa. This is called "runto-
	completion" behavior.

#Jobs#
[js]
console.log( "A" );
setTimeout( function(){
	console.log( "B" );
}, 0 );
// theoretical "Job API"
schedule( function(){
	console.log( "C" );
	schedule( function(){
		console.log( "D" );
	} );
} );
[js]
=>	It would print out "A C D B" , because the Jobs happen at the end of
	the current event loop tick, and the timer fires to schedule for the next event loop tick (if available).

--= Promises =--
=> Indicates future value that could be in either of the state : pending,success,failure.
=> #Promise# is externally immutable once resolved.
[js]
function add(getX,getY,cb) {
	var x, y;
	getX( function(xVal){
		x = xVal;
		// both are ready?
		if (y != undefined) {
		cb( x + y ); // send along sum
		}
	} );
	getY( function(yVal){
		y = yVal;
		// both are ready?
		if (x != undefined) {
		cb( x + y ); // send along sum
		}
	} );
}
// `fetchX()` and `fetchY()` are sync or async
// functions
add( fetchX, fetchY, function(sum){
	console.log( sum ); // that was easy, huh?
} );
[js]
--= Immutability of Promise =--
[js]
function bar() {
	// `foo(..)` has definitely finished, so
	// do `bar(..)`'s task
}
function oopsBar() {
	// oops, something went wrong in `foo(..)`,
	// so `bar(..)` didn't run
}
// ditto for `baz()` and `oopsBaz()`
var p = foo( 42 );
p.then( bar, oopsBar );
p.then( baz, oopsBaz );
[js]
=> 	snippets end up calling then(..) twice against the same promise p illustrates the point made
	earlier, which is that Promises (once resolved) retain their same resolution (fulfillment or rejection) forever, 
	and can subsequently be observed as many times as necessary.

#Reveling Constructor# -> https://blog.domenic.me/the-revealing-constructor-pattern/

--- Promise Trust ---
#Refer callback_trust_issue.png#

=>Callback too early 
	->	Zalgo-like effects where sometimes a taskfinishes synchronously and sometimes asynchronously, which can lead to race conditions.

=> Callback too late 
	->	It's not possible for synchronous observation, so it's not possible for a synchronous chain of tasks to run in such a way to in
		effect "delay" another callback from happening as expected. That is, when a Promise is resolved, all then(..) registered
		callbacks on it will be called, in order, immediately at the next asynchronous opportunity (#Jobs#),
		and nothing that happens inside of one of those callbacks can affect/delay the calling of the other callbacks.

=> 	Nothing (not even a JS error) can prevent a Promise from notifying you of its resolution (if it's resolved). If you register
	both fulfillment and rejection callbacks for a Promise, and the Promise gets resolved, one of the two callbacks will always
	be called.
=> 	Promises are defined so that they can only be resolved once. If for some reason
	the Promise creation code tries to call resolve(..) or reject(..) multiple times, or tries to call both, 
	the Promise will accept only the first resolution, and will silently ignore any subsequent attempts.
=> 	Promises can have, at most, one resolution value (#fulfillment or rejection#).
=> 	If you call resolve(..) or reject(..) with multiple parameters, all subsequent parameters beyond the first will be silently ignored. 
	Although that might seem a violation of the guarantee we just described, it's not exactly, because it constitutes an invalid usage of the Promise mechanism. 
	Other invalid usages of the API (such as calling resolve(..) multiple times) are similarly protected, so the Promise behavior here is consistent.
=> 	Promises turn even JS exceptions into asynchronous behavior, thereby reducing the race condition chances greatly. !Refer promise_error.png!
#Interesting#
[js]
var p = new Promise( function(resolve,reject){
	resolve( 42 );
} );

p.then(
	function fulfilled(msg){
		foo.bar();
		console.log( msg );	// never gets here :(
	},
	function rejected(err){
		// never gets here either :(
	}
);
[js]
=> 	What happens if a Promise is fulfilled, but there's a JS exception error during the observation (in a then(..) registered callback)? 
	- 	The p.then(..) call itself returns another promise, and it's that promise that will be rejected with the TypeError exception and not the #rejected# itself.
=> 	Why couldn't it just call the error handler we have defined there? 
	Seems like a logical behavior on the surface. But it would violate the fundamental principle that Promises are #immutable# once resolved. 
	p was already fulfilled to the value 42, so it can't later be changed to a rejection just because there's an error in observing p's resolution.

#Trustable promise#
-> If you pass an immediate, non-Promise, non-thenable value to Promise.resolve(..), you get a promise that's fulfilled with that value.
[js]
var p1 = new Promise( function(resolve,reject){
	resolve( 42 );
} );

var p2 = Promise.resolve( 42 );
[js]
=> p1 and p2 will behave identically.
=> But if you pass genuine promise to #Promise.resolve()# you just get the same promise back
[js]
var p1 = Promise.resolve( 42 );
var p2 = Promise.resolve( p1 );
p1 === p2; //true
[js]
=> 	Even more importantly, if you pass a non-Promise thenable value to Promise.resolve(..), 
	it will attempt to unwrap that value, and the unwrapping will keep going until a concrete final non-Promise-like value is extracted.

=> 	Promise.resolve(..) will accept any thenable, and will unwrap it to its non-thenable value. 
	But you get back from Promise.resolve(..) a real, genuine Promise in its place, one that you can trust. 
	If what you passed in is already a genuine Promise, you just get it right back, so there's no downside at all to filtering through Promise.resolve(..) to gain trust

#Chain Flow#
1.	Every time you call then(..) on a Promise, it creates and returns a new Promise, which we can chain with.
2.	Whatever value you return from the then(..) call's fulfillment callback (the first parameter) is automatically set as 
	the fulfillment of the chained Promise (from the first point).

[js]
// step 1:
request( "http://some.url.1/" )

// step 2:
.then( function(response1){
	foo.bar(); // undefined, error!

	// never gets here
	return request( "http://some.url.2/?v=" + response1 );
} )

// step 3:
.then(
	function fulfilled(response2){
		// never gets here
	},
	// rejection handler to catch the error
	function rejected(err){
		console.log( err );	// `TypeError` from `foo.bar()` error
		return 42;
	}
)

// step 4:
.then( function(msg){
	console.log( msg );		// 42
} );
[js]

=>	When the error occurs in step 2, the rejection handler in step 3 catches it. 
	The return value (42 in this snippet), if any, from that rejection handler fulfills the promise for the next step (4), 
	such that the chain is now back in a fulfillment state.
[js]
var p = new Promise( function(resolve,reject){
	reject( "Oops" );
} );

var p2 = p.then(
	function fulfilled(){
		// never gets here
	}
	// assumed rejection handler, if omitted or
	// any other non-function value passed
	// function(err) {
	//     throw err;
	// }
);

var p = Promise.resolve( 42 );

p.then(
	// assumed fulfillment handler, if omitted or
	// any other non-function value passed
	// function(v) {
	//     return v;
	// }
	null,
	function rejected(err){
		// never gets here
	}
);
[js]
# Resolve, Fulfill, and Reject #
